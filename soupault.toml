# To learn about configuring soupault, visit https://www.soupault.app/reference-manual

[settings]
# Soupault version that the config was written/generated for
# Trying to process this config with an older version will result in an error message
soupault_version = "4.6.0"

# Stop on page processing errors?
strict = true

# Display progress?
verbose = true

# Display detailed debug output?
debug = false

# Where input files (pages and assets) are stored.
site_dir = "site"

# Where the output goes
build_dir = "build"

# Files inside the site/ directory can be treated as pages or static assets,
# depending on the extension.
#
# Files with extensions from this list are considered pages and processed.
# All other files are copied to build/ unchanged.
#
# Note that for formats other than HTML, you need to specify an external program
# for converting them to HTML (see below).
page_file_extensions = ["htm", "html", "md", "rst", "adoc"]

# Files with these extensions are ignored.
ignore_extensions = ["draft"]

# Soupault can work as a website generator or an HTML processor.
#
# In the "website generator" mode, it considers files in site/ page bodies
# and inserts them into the empty page template stored in templates/main.html
#
# Setting this option to false switches it to the "HTML processor" mode
# when it considers every file in site/ a complete page and only runs it through widgets/plugins.
generator_mode = true

# Files that contain an <html> element are considered complete pages rather than page bodies,
# even in the "website generator" mode.
# This allows you to use a unique layout for some pages and still have them processed by widgets.
complete_page_selector = "html"

# Website generator mode requires a page template (an empty page to insert a page body into).
# If you use "generator_mode = false", this file is not required.
default_template_file = "templates/main.html"

# Page content is inserted into a certain element of the page template.
# This option is a CSS selector that is used for locating that element.
# By default the content is inserted into the <body>
default_content_selector = "main"

# You can choose where exactly to insert the content in its parent element.
# The default is append_child, but there are more, including prepend_child and replace_content
default_content_action = "append_child"

# If a page already has a document type declaration, keep the declaration
keep_doctype = true

# If a page does not have a document type declaration, force it to HTML5
# With keep_doctype=false, soupault will replace existing declarations with it too
doctype = "<!DOCTYPE html>"

# Insert whitespace into HTML for better readability
# When set to false, the original whitespace (if any) will be preserved as is
pretty_print_html = true

# Enables or disables clean URLs.
# When false: site/about.html -> build/about.html
# When true: site/about.html -> build/about/index.html
clean_urls = true

# Plugins can be either automatically discovered or loaded explicitly.
# By default discovery is enabled and the place where soupault is looking is the plugins/ subdirectory
# in your project.
# E.g., a file at plugins/my-plugin.lua will be registered as a widget named "my-plugin".
plugin_discovery = true
plugin_dirs = ["plugins"]

[custom_options]
blog_summary_max_entries = 5

# It is possible to store pages in any format if you have a program
# that converts it to HTML and writes it to standard output.
# Example:
#[preprocessors]
#  md = "cmark --unsafe --smart"
#  adoc = "asciidoctor -o -"

[widgets.page-title]
widget = "title"
selector = "h1"
default = "My Homepage"
append = " &mdash; My Homepage"
force = false

[widgets.insert-header]
widget = "include"
selector = "main"
action = "insert_before"
file = "templates/header.html"

[widgets.highlight-active-link]
widget = "section-link-highlight"
after = ["insert-header"]
selector = "nav"
active_link_class = "nav-active"

[widgets.generator-meta]
widget = "insert_html"
html = '<meta name="generator" content="soupault">'
selector = "head"

[preprocessors]
md = "pandoc -f markdown+smart -t html"

[widgets.header]
widget = "include"
file = "templates/header.html"
selector = "#header"

[widgets.insert-sakura-css]
widget = "insert_html"
selector = "head"
html = """
<link rel="stylesheet" href="/sakura.css" type="text/css">
<link rel="stylesheet" href="/grid.css" type="text/css">
"""

[widgets.footer]
widget = "include"
file = "templates/footer.html"
selector = "#footer"

[widgets.generated-on]
widget = "exec"
selector = "#generated-on"
command = "date -R"
parse = true

[widgets.line-numbers]
widget = "preprocess_element"
selector = "pre"
command = "cat -n"
parse = false

# Runs the content of <* class="language-*"> elements through a syntax highlighter
[widgets.highlight]
widget = "preprocess_element"
selector = '*[class^="language-"]'
command = 'highlight --out-format=html --fragment --inline-css --syntax=$(echo $ATTR_CLASS | sed -e "s/language-//")'

[widgets.graphviz-svg]
widget = 'preprocess_element'
selector = 'span.graphviz'
command = 'dot -Tsvg'
action = "replace_element"

# [widgets.graphviz-png]
# widget = 'preprocess_element'
# selector = '.graphviz-png'
# command = 'dot -Tpng > $TARGET_DIR/graph_$ATTR_ID.png && echo \<img src="graph_$ATTR_ID.png"\>'
# action = 'replace_element'

[widgets.last-modified]
widget = "exec"
selector = "#git-timestamp"
command = "git log -n 1 --pretty=format:%ad --date=format:%Y-%m-%d -- $PAGE_FILE"

# Content model
[index.fields]

[index.fields.title]
selector = ["h1"]

[index.fields.date]
selector = ["time#post-date", "time"]
extract_attribute = "datetime"
fallback_to_content = true

[index.fields.excerpt]
selector = ["p#post-excerpt", "p"]

[index]
index = true
sort_descending = true
sort_type = "calendar" # numeric | lexicographic | calendar
sort_by = "date" # Which index field to use a sorting key
date_formats = ["%F"] # %F means YYYY-MM-DD
strict_sort = true

[index.views.blog]
section = "blog"
index_selector = "#blog-index"
index_item_template = """
  <h2><a href="{{url}}">{{title}}</a></h2>
  <p><strong>Last update:</strong> {{date}}.</p>
  <p>{{excerpt}}</p>
  <a href="{{url}}">Read more</a>
"""

[index.views.blog-summary]
section = "blog"
index_selector = "#blog-summary"
index_template = """
  {% set limit = int(soupault_config.custom_options.blog_summary_max_entries) %}
  <dl>
    {% for e in sublist(0, limit, entries) %}
    <dt>{{e.date}}</dt>
    <dd>
      <a href="{{e.url}}">{{e.title}}</a>
      <p>{{e.excerpt}}</p>
    </dd>
    {% endfor %}
  </dl>
"""

[index.views.patterns-ml]
section = "patterns-ml"
index_selector = "#patterns-ml"
index_template = """
  <dl>
    {% for e in entries %}
    <dt>{{e.date}}</dt>
    <dd>
      <a href="{{e.url}}">{{e.title}}</a>
      <p>{{e.excerpt}}</p>
    </dd>
    {% endfor %}
  </dl>
"""
